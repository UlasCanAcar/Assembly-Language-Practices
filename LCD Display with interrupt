org 00h
	sjmp start
	org 03h ; external interrupt 0 vector address
		;sjmp task1
	org 13h ; external interrupt 1 vector address
		;sjmp task2
		
	org 30h	
	start:
	mov tmod, #01h ;timer 0 16bit mode 
	setb it1 ; interrupt edge triggered
	setb it0 ; interrupt edge triggered
	setb ea  ; enable all set interrupts
	setb ex1 ; enable int1 interrupts
	setb ex0 ; enable int1 interrupts
	
	mov a, #38h
	acall lcd_command_write ; enable 5x7 mode for char
	mov a, #0eh
	acall lcd_command_write ; display off, cursor on
	
	;mov a, #01h
	;acall lcd_command_write ; clear display
	;mov a, #02h
	;acall lcd_command_write ; move the cursor to beginning of first line
	;mov a, #10h
	;acall lcd_command_write ; shift cursor to the right
	
	mov r2, #30h
	mov r6, #10d
	loop3:
	mov a, #01h
	acall lcd_command_write ; clear display
	mov a, r2
	acall lcd_data_write
	inc r2
	
	mov r1, #30h
	mov r3, #10d
	loop1:
	
	mov r5, #10d
	mov r0, #30h
	
	clr a
	mov a, r1
	acall lcd_data_write
	inc r1
	
	
	loop2:	
	clr a
	mov a, r0
	acall lcd_data_write
	inc r0
	;mov b, a
	mov a, #10h
	acall lcd_command_write	; shift cursor to the left
	wait: sjmp wait
	task1:
	djnz r5, loop2
	
	mov a, #10h
	acall lcd_command_write	; shift cursor to the left
    djnz r3, loop1
	
	djnz r6, loop3
	
	lcd_command_write:
	mov p0, a
	clr p2^0  ; RS bit = 0
	clr p2^1  ; RW bit = 0
	setb p2^2 ; Enable bit = 0
	acall delay
	clr p2^2 ; High to Low Pulse
	ret
	
	lcd_data_write:
	mov p0, a
	setb p2^0  ; RS bit = 1
	clr p2^1  ; RW bit = 0
	setb p2^2 ; Enable bit = 0
	acall delay
	clr p2^2 ; High to Low Pulse
	ret
	
	delay: 
	mov th0, #00h
	mov tl0, #00h
	setb tr0
	wait_flag: jnb tf0, wait_flag
	clr tr0 ; stop timer 
	clr tf0 ; clear timer flag
	ret
	
	end
